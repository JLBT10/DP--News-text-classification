name: CI-CD Pipeline

on:
  push

jobs:
  #Checking-code-quality:
    #runs-on: ubuntu-latest
    #steps:
    
      # Action 1: Pull the code from GitHub
      #- name: Checkout code
        #uses: actions/checkout@v3
       
      # Action 2: Installation of Python and pip
      #- name: Install Python and pip
        #uses: actions/setup-python@v3
        #with:
          #python-version: '3.12.6'  # Use quotes around the version
         
      # Action 3: Installation of dependencies
      #- name: Install dependencies
        #run: |
          #pip install pylint
          #pip install -r ./model_dev/requirements.txt
         
      # Action 4: Run pylint
      #- name: Run pylint
        #run: pylint model_dev/train.py
    
  launch-training:
    runs-on: self-hosted  # Or use 'ubuntu-latest' if you're not using a self-hosted runner
    steps:

      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username from GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password from GitHub Secrets

      # Step 3: Build Docker image for training
      - name: Build Docker image for training
        run: |
          docker build -t model_trainings .
        
      # Step 4: Run the training container and mount volumes
      - name: Run training and generate artifacts
        run: |
          docker run -v ./mlruns:/src/model_dev/mlruns model_trainings python3 train.py
          docker commit $(docker ps -alq) model_trained  # Commit the container to save the trained model

      # Step 5: Build Docker image for the app
      - name: Build Docker image for app
        run: |
          docker build -t app .

      # Step 6: Run the app (optional step for testing locally)
      - name: Run the app container (optional)
        run: |
          docker run -v ./mlruns:/mlruns app

      # Step 7: Commit app container as a new image
      - name: Commit app container
        run: |
          docker commit $(docker ps -alq) model-app

      # Step 8: Push Docker images to Docker Hub
      - name: Push Docker images to Docker Hub
        run: |
          docker tag model_trained:latest ${{ secrets.DOCKER_USERNAME }}/model_trained:latest
          docker tag model-app:latest ${{ secrets.DOCKER_USERNAME }}/model-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/model_trained:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/model-app:latest


 # building-app-dockerfile:
  #  runs-on: ubuntu-lateest
   # steps:
      
   #   # Action 1: Pull the code from GitHub
   # - name: Checkout code
   #   uses: actions/checkout@v3

   # - name: building and launching app 
   #   run:
    #    docker build -f api.Dockerfile -t app_docker .
    #    docker run -it app_docker
        
     
      

