name: CI-CD Pipeline

on:
  push

jobs:
  #Checking-code-quality:
    #runs-on: ubuntu-latest
    #steps:
    
      # Action 1: Pull the code from GitHub
      #- name: Checkout code
        #uses: actions/checkout@v3
       
      # Action 2: Installation of Python and pip
      #- name: Install Python and pip
        #uses: actions/setup-python@v3
        #with:
          #python-version: '3.12.6'  # Use quotes around the version
         
      # Action 3: Installation of dependencies
      #- name: Install dependencies
        #run: |
          #pip install pylint
          #pip install -r ./model_dev/requirements.txt
         
      # Action 4: Run pylint
      #- name: Run pylint
        #run: pylint model_dev/train.py
    
  launch-training:
    runs-on: self-hosted  # Or use 'ubuntu-latest' if you're not using a self-hosted runner
    defaults:
     run:
      working-directory: ./model_dev

    steps:

      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username from GitHub Secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password from GitHub Secrets

      # Step 3: Build Docker image for training
      - name: Build Docker image for training
        run: |
          docker build -t model_dev_1 .
        
      # Step 4: Build tag and push the Docker image for the app
      - name: Run training and generate artifacts
        run: |
          docker run -it --gpus all -p 5000:5000 -v "$(pwd)/mlruns:/src/model_dev/mlruns" model_dev_1 sh run.sh
          docker commit $(docker ps -alq) model_dev_1  # Commit the container to save the trained model
          docker tag model_dev:latest ${{ secrets.DOCKER_USERNAME }}/model_dev_1:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/model_dev_1:latest

      # Step 5: Build tag and push the Docker image for the app
      - name: Build Docker image for app
        working-directory: ./app  # Override working directory
        run: |
          docker build -t app .
          docker commit $(docker ps -alq) model-app-1
          docker tag model-app-1:latest ${{ secrets.DOCKER_USERNAME }}/model-app-1:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/model-app-1:latest


 # building-app-dockerfile:
  #  runs-on: ubuntu-lateest
   # steps:
      
   #   # Action 1: Pull the code from GitHub
   # - name: Checkout code
   #   uses: actions/checkout@v3

   # - name: building and launching app 
   #   run:
    #    docker build -f api.Dockerfile -t app_docker .
    #    docker run -it app_docker
        
     
      

